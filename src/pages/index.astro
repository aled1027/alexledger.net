---
import Layout from "@layouts/new-layout.astro";
---

<Layout>
  <div class="two-columns">
    <div class="grid-box | color-on-hover border-right border-bottom">
      <h1 class="heading-2">ALEX LEDGER</h1>
    </div>
    <a
      href="/posts"
      class="grid-box | color-on-hover border-right border-bottom text-decoration-none">
      <h2 class="heading-3">Posts</h2>
    </a>

    <a
      href="/guides"
      class="grid-box | color-on-hover border-right border-bottom text-decoration-none">
      <h2 class="heading-3">Guides</h2></a
    >
    <a
      href="/projects"
      class="grid-box | color-on-hover border-right border-bottom text-decoration-none"
      data-type="svg">
      <!-- I wanted this to be animtaed on repeat with drawSVG,
      but I'm not sure I want to pay for gsap because drawSVG isn't part of gsap core.  -->
      <svg
        class="svg"
        viewBox="0 0 1200 1200"
        xmlns="http://www.w3.org/2000/svg">
        <path
          d="m1144.9 253.31-28.13-24.75 12.2-13.88a66.61 66.61 0 0 0 16.3-48.18 66.54 66.54 0 0 0-22.68-45.75l-51-44.63c-27.56-24.19-69.75-21.37-93.94 6.19l-12.19 13.87-1.69-1.5a18.77 18.77 0 0 0-13.5-4.5 18.13 18.13 0 0 0-12.93 6.2L803.08 249.73a18.57 18.57 0 0 0 0 24.56l35.43 41.44-259.69 97.69a18.42 18.42 0 0 0-11.8 14.25 18.72 18.72 0 0 0 6.18 17.44l57.19 50.06a18.24 18.24 0 0 0 12.37 4.69c2.06 0 4.31-.38 6.19-1.13l265.13-93.56c.19 0 .56-.19.75-.37l46.31 54.18c3.56 4.13 8.81 6.57 14.25 6.57s10.69-2.44 14.25-6.38l156.94-179.44a18.53 18.53 0 0 0-1.69-26.44zm-498 206.44-25.5-22.31 243-91.5 24.19 28.31zm291-85.69-95.81-111.75 111.19-127.13 109.69 96zm37.69 44.06-13.13-15.37 128.63-146.81 15 13.12zm125.06-228.19-12.19 13.88-94.69-82.88 12-13.87a29.1 29.1 0 0 1 41.06-2.81l51.2 44.8c5.8 5.07 9.18 12.2 9.74 19.88s-2.06 15.2-7.12 21z"
        ></path>
        <path
          d="M615.66 560.81c-.38 0-.75 0-1.13-.05a18.77 18.77 0 0 1-17.62-19.82l1.55-26.2c.6-10.32 9.51-18.52 19.82-17.63a18.74 18.74 0 0 1 17.63 19.83l-1.55 26.2a18.78 18.78 0 0 1-18.7 17.67z"
        ></path>
        <path
          d="M554.06 573.89c-.38 0-.75 0-1.13-.05a18.77 18.77 0 0 1-17.62-19.82l1.55-26.2c.6-10.37 9.56-18.38 19.82-17.63a18.77 18.77 0 0 1 17.63 19.83l-1.55 26.2a18.78 18.78 0 0 1-18.7 17.67z"
        ></path>
        <path
          d="M585.05 657.05c-.38 0-.75 0-1.13-.05a18.77 18.77 0 0 1-17.62-19.82l1.55-26.2a18.67 18.67 0 0 1 19.82-17.63 18.77 18.77 0 0 1 17.63 19.83l-1.55 26.25a18.7 18.7 0 0 1-18.7 17.62z"
        ></path>
        <path
          d="M592.26 939.19c-.38 0-.75 0-1.13-.05a18.77 18.77 0 0 1-17.62-19.82l1.55-26.2c.6-10.37 9.51-18.38 19.82-17.63a18.77 18.77 0 0 1 17.63 19.83l-1.55 26.2a18.78 18.78 0 0 1-18.7 17.67z"
        ></path>
        <path
          d="M496.31 1007.5c-.38 0-.75 0-1.13-.05a18.77 18.77 0 0 1-17.62-19.82l1.55-26.2c.6-10.37 9.51-18.38 19.82-17.63a18.77 18.77 0 0 1 17.63 19.83l-1.55 26.2a18.78 18.78 0 0 1-18.7 17.67z"
        ></path>
        <path
          d="M546.42 1069.1c-.38 0-.75 0-1.13-.05a18.77 18.77 0 0 1-17.62-19.82l1.55-26.2c.6-10.37 9.47-18.48 19.82-17.63a18.77 18.77 0 0 1 17.63 19.83l-1.55 26.2a18.78 18.78 0 0 1-18.7 17.67z"
        ></path>
        <path
          d="M1116.7 1108.5H356.2V978.94a11.87 11.87 0 0 0 4.5-3l55.5-53.81c24.94-.38 96-5.63 141-52.31 54.19-56.07 47.25-147.37 46.88-151.13a18.93 18.93 0 0 0-17.82-17.25h-5.62c-21.94 0-96.94 3.75-143.81 52.12-45 46.5-47.81 117.38-47.25 142.31l-33.38 32.25V723.75c22.7 25.88 51.75 37.88 53.44 38.44 2.25.94 4.69 1.5 6.94 1.5 2.81 0 5.44-.56 7.87-1.88a18.2 18.2 0 0 0 9.94-11.06c.75-2.06 16.88-51.56-3.37-95.81-1.13-2.25-2.25-4.5-3.57-6.56 3 1.5 6 2.81 9.2 4.12 12.74 4.88 26.8 7.5 42.18 7.5 29.06 0 52.69-9.37 53.62-9.75a18.97 18.97 0 0 0 10.5-10.69 18.54 18.54 0 0 0-.56-14.8c-.94-2.07-23.62-48.95-69-66.76-3-1.12-6.19-2.25-9.37-3 2.43-.75 4.68-1.68 6.93-2.62 45-18.75 66.75-66.19 67.7-68.06a19.78 19.78 0 0 0 .18-15A19.23 19.23 0 0 0 528.14 459c-.94-.37-23.25-8.62-51-8.62-16.31 0-31.5 2.81-45 8.44-.56.18-1.12.56-1.69.75.94-1.7 1.5-3.38 2.25-5.07 17.82-45.37-1.3-93.93-2.25-96-1.87-4.68-5.62-8.43-10.5-10.3s-10.12-1.7-14.8.55c-2.07.94-48.95 23.63-66.76 68.82a30.23 30.23 0 0 0-1.69 5.43c-.18-.56-.37-1.3-.75-1.87-20.43-44.06-68.62-63.94-70.68-64.88a19.33 19.33 0 0 0-14.82.38 19.24 19.24 0 0 0-9.93 11.06c-.75 2.25-16.88 51.75 3.37 96a73.15 73.15 0 0 0 3.56 6.56c-3-1.5-6-2.8-9.18-4.12-12.75-4.88-26.82-7.5-42-7.5-29.25 0-52.88 9.37-53.82 9.75-4.87 2.06-8.62 5.81-10.5 10.69s-1.68 10.12.57 14.8c.93 2.07 23.62 48.95 69 66.76 3 1.12 6.18 2.25 9.37 3-2.44.75-4.69 1.69-6.94 2.62-45 18.75-66.75 66.2-67.68 68.07a19.78 19.78 0 0 0-.2 15 19.23 19.23 0 0 0 10.7 10.3c.93.38 23.25 8.63 51 8.63 16.3 0 31.5-2.81 45-8.44.56-.18 1.12-.56 1.68-.75-.93 1.7-1.5 3.38-2.25 5.07-17.8 45.37 1.32 93.75 2.25 95.8a18.12 18.12 0 0 0 10.5 10.5 17.3 17.3 0 0 0 6.75 1.32 17 17 0 0 0 8.07-1.87c1.5-.75 28.12-13.5 48.94-38.82v288.37L285.33 987c.56-25.13-2.44-95.63-47.25-142.13-46.87-48.57-121.87-52.32-143.81-52.32-3.56 0-5.62.2-5.62.2a18.6 18.6 0 0 0-17.82 17.05c-.37 3.94-7.3 95.25 46.88 151.31 45.19 46.88 116.44 51.94 141.19 52.32l55.31 53.8a11.87 11.87 0 0 0 4.5 3v38.26H83.21a18.8 18.8 0 0 0-18.75 18.75c0 10.5 8.44 18.75 18.75 18.75h1033.5c10.5 0 18.75-8.25 18.75-18.75a18.69 18.69 0 0 0-18.75-18.75zM463.83 779.63c29.81-30.94 78.19-38.44 102.94-40.31-.75 25.69-6.75 73.69-36.56 104.44-29.81 31.12-78.19 38.62-103.12 40.31.94-25.5 6.75-73.31 36.75-104.44zm31.88-158.44c-14.25 2.06-32.25 1.5-45.57-3.75-15.37-6-27.56-17.81-35.8-28.13 14.24-2.06 32.24-1.5 45.37 3.76 15.56 6 27.75 17.8 36 28.12zM446.58 493.5c8.81-3.75 19.13-5.62 30.56-5.62 5.25 0 10.13.37 14.81.93-8.06 10.5-19.87 22.5-35.25 28.88-9 3.75-19.12 5.62-30.56 5.62-5.25 0-10.31-.37-14.81-.93 8.06-10.7 19.88-22.7 35.25-28.88zm-73.31-62.25c6.19-15.56 17.81-27.56 28.12-35.81 2.07 13.12 2.44 30-3.56 45.37-6 15.57-17.81 27.57-28.12 35.82-1.88-13.13-2.44-29.82 3.56-45.38zm-6.56 205.31c10.68 7.69 23.25 18.94 30.18 34.13s7.5 31.87 6.38 45.18c-10.88-7.68-23.25-19.12-30.19-34.12-7.12-15.19-7.69-32.06-6.37-45.19zM179.4 497.43c14.06-2.06 32.06-1.5 45.37 3.75 15.38 6 27.56 17.81 35.81 28.13-14.25 2.06-32.25 1.5-45.37-3.75-15.56-6-27.56-17.82-35.81-28.13zm48.93 127.69c-12.93 5.44-30.93 6.56-45.37 4.69 8.06-10.5 19.87-22.5 35.25-28.88 9-3.75 19.12-5.62 30.56-5.62 5.25 0 10.31.37 14.81.94-8.06 10.5-19.87 22.5-35.25 28.87zm73.13 62.25c-6 15.38-17.63 27.56-27.94 35.81-2.06-13.12-2.44-30 3.56-45.37 6-15.56 17.82-27.56 28.13-35.81 1.87 13.12 2.44 29.8-3.75 45.37zm6.75-205.31c-10.69-7.69-23.25-19.12-30.19-34.12-6.94-15.2-7.5-31.88-6.37-45.2 10.87 7.7 23.25 19.13 30.18 34.13 7.13 15.19 7.7 31.88 6.38 45.19zm-163.5 453c-29.81-30.94-35.81-78.75-36.56-104.44 24.75 1.88 73.12 9.38 102.94 40.31s35.8 78.75 36.56 104.44c-24.94-1.87-73.13-9.37-102.94-40.31zM314.4 550.32a24.6 24.6 0 0 1 23.06-15.75c3 0 6.19.56 9 1.69a24.85 24.85 0 0 1 14.06 32.06c-4.87 12.37-19.5 18.94-32.06 14.06a24.85 24.85 0 0 1-14.06-32.06z"
        ></path>
        <path
          d="m982.87 732.56-82.5-234.94a18.77 18.77 0 0 0-17.63-12.56c-8.06 0-15 5.06-17.8 12.56L781.3 735.93c-1.88 5.81-1.13 12.19 2.44 17.06a18.51 18.51 0 0 0 15.37 7.88h40.13v93.37h-3.38A18.69 18.69 0 0 0 817.12 873v164.26a18.8 18.8 0 0 0 18.75 18.75h93.75a18.8 18.8 0 0 0 18.75-18.75V873c0-10.5-8.44-18.75-18.75-18.75h-3.37v-93.37h40.5a18.8 18.8 0 0 0 18.75-18.75c0-3.38-.94-6.75-2.63-9.57zm-106.12 28.31h12v93.38h-12zm34.13 257.63h-56.25v-78.37h56.25zm0-115.88h-56.25v-10.87h56.25zm-85.32-179.26 57.2-162.94 57.18 162.94z"
        ></path>
      </svg>
      <h2 class="heading-3">Projects</h2>
    </a>

    <div
      class="grid-box | color-on-hover border-right border-bottom text-decoration-none flow"
      data-type="center">
      <div class="flex-group mx-auto">
        <canvas id="game-of-life" width="350" height="200"></canvas>
        <div class="even-columns .mx-auto">
          <button class="button start-gol mx-auto my-auto" data-type="primary"
            >Start</button
          >
          <button class="button pause-gol mx-auto my-auto" data-type="primary"
            >Pause</button
          >
          <button class="button reset-gol mx-auto my-auto" data-type="primary"
            >Reset</button
          >
        </div>
      </div>
    </div>

    <a
      href="/lists"
      class="grid-box | color-on-hover border-right border-bottom text-decoration-none">
      <h2 class="heading-3">Lists</h2>
    </a>
    <a
      href="/search"
      class="grid-box | color-on-hover border-right border-bottom text-decoration-none">
      <h2 class="heading-3">Search</h2>
    </a>
    <div
      class="grid-box | color-on-hover border-right border-bottom text-decoration-none">
      <p>
        This site was made with <a href="https://astro.build/" target="_blank"
          >Astro</a
        >. The source code can be found on <a
          href="https://github.com/aled1027/alexledger.net"
          target="_blank">GitHub</a
        >.
      </p>
      <h2 class="heading-3">this site</h2>
    </div>
  </div>

  <script is:inline>
    document.addEventListener(
      "astro:page-load",
      function () {
        const canvas = document.getElementById("game-of-life");
        const ctx = canvas.getContext("2d");
        const cellSize = 10;
        const rows = 330;
        const cols = 230;

        // Define color variables
        const liveCellColor = "#447f6f";

        // These two colors are the same as the body background
        const deadCellColor = "hsl(0 0% 95%)";
        const cellStrokeColor = "hsl(0 0% 95%)";

        // Initialize the grid with empty values
        let grid = Array.from({ length: rows }, () =>
          Array.from({ length: cols }, () => 0)
        );

        // Patterns for each letter in "HELLO WORLD" (scaled up)
        const letters = {
          H: [
            [1, 1, 0, 1, 1],
            [1, 1, 0, 1, 1],
            [1, 1, 1, 1, 1],
            [1, 1, 0, 1, 1],
            [1, 1, 0, 1, 1],
          ],
          E: [
            [1, 1, 1, 1, 1],
            [1, 1, 0, 0, 0],
            [1, 1, 1, 1, 1],
            [1, 1, 0, 0, 0],
            [1, 1, 1, 1, 1],
          ],
          L: [
            [1, 1, 0, 0, 0],
            [1, 1, 0, 0, 0],
            [1, 1, 0, 0, 0],
            [1, 1, 0, 0, 0],
            [1, 1, 1, 1, 1],
          ],
          O: [
            [1, 1, 1, 1, 1],
            [1, 1, 0, 1, 1],
            [1, 1, 0, 1, 1],
            [1, 1, 0, 1, 1],
            [1, 1, 1, 1, 1],
          ],
          W: [
            [1, 1, 0, 1, 1],
            [1, 1, 0, 1, 1],
            [1, 1, 0, 1, 1],
            [1, 1, 1, 1, 1],
            [1, 1, 1, 0, 1],
          ],
          R: [
            [1, 1, 1, 1, 0],
            [1, 1, 0, 1, 1],
            [1, 1, 1, 1, 0],
            [1, 1, 0, 1, 1],
            [1, 1, 0, 1, 1],
          ],
          D: [
            [1, 1, 1, 1, 0],
            [1, 1, 0, 1, 1],
            [1, 1, 0, 1, 1],
            [1, 1, 0, 1, 1],
            [1, 1, 1, 1, 0],
          ],
        };

        // Utility function to place a letter on the grid
        function placeLetter(letter, startRow, startCol) {
          const pattern = letters[letter];
          if (!pattern) return;

          pattern.forEach((row, rowIndex) => {
            row.forEach((cell, colIndex) => {
              const newRow = startRow + rowIndex;
              const newCol = startCol + colIndex;
              if (newRow < rows && newCol < cols) {
                grid[newRow][newCol] = cell;
                drawCell(newRow, newCol, cell ? liveCellColor : deadCellColor);
              }
            });
          });
        }

        // Utility function to place a message on the grid
        function placeMessage(words, startRow, startCol) {
          let rowOffset = 0;
          for (const word of words) {
            let colOffset = 0;
            word.split("").forEach((letter) => {
              if (letter === " ") {
                colOffset += 6; // Add space between words
              } else {
                placeLetter(letter, startRow + rowOffset, startCol + colOffset);
                colOffset += 6; // Space between letters
              }
            });
            rowOffset += 10;
          }
        }

        // Function to draw a cell
        function drawCell(row, col, color) {
          ctx.fillStyle = color;
          ctx.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);
          ctx.strokeStyle = cellStrokeColor;
          ctx.strokeRect(col * cellSize, row * cellSize, cellSize, cellSize);
        }

        function getNextState(grid, x, y) {
          const neighbors = [
            [0, 1],
            [1, 1],
            [1, 0],
            [1, -1],
            [0, -1],
            [-1, -1],
            [-1, 0],
            [-1, 1],
          ];
          const liveNeighbors = neighbors.reduce((acc, [dx, dy]) => {
            const newX = x + dx;
            const newY = y + dy;
            if (newX >= 0 && newX < rows && newY >= 0 && newY < cols) {
              return acc + grid[newX][newY];
            }
            return acc;
          }, 0);

          if (grid[x][y] === 1) {
            return liveNeighbors === 2 || liveNeighbors === 3 ? 1 : 0;
          } else {
            return liveNeighbors === 3 ? 1 : 0;
          }
        }

        function updateGrid() {
          const newGrid = grid.map((row, rowIndex) =>
            row.map((cell, colIndex) => getNextState(grid, rowIndex, colIndex))
          );

          newGrid.forEach((row, rowIndex) => {
            row.forEach((cell, colIndex) => {
              if (grid[rowIndex][colIndex] !== cell) {
                drawCell(
                  rowIndex,
                  colIndex,
                  cell ? liveCellColor : deadCellColor
                );
              }
            });
          });

          grid = newGrid;
        }

        function setup() {
          const startingMessage = ["HELLO", "WORLD"];
          const startRow = 2;
          const startCol = 2;
          placeMessage(startingMessage, startRow, startCol);
          grid.forEach((row, rowIndex) => {
            row.forEach((cell, colIndex) => {
              drawCell(
                rowIndex,
                colIndex,
                cell ? liveCellColor : deadCellColor
              );
            });
          });
        }

        // Event listener for canvas click to create a live cell
        canvas.addEventListener("click", (event) => {
          const rect = canvas.getBoundingClientRect();
          const x = event.clientX - rect.left;
          const y = event.clientY - rect.top;
          const col = Math.floor(x / cellSize);
          const row = Math.floor(y / cellSize);

          if (row < rows && col < cols) {
            grid[row][col] = 1;
            drawCell(row, col, liveCellColor);
          }
        });

        // Control buttons
        const startButton = document.querySelector(".start-gol");
        const pauseButton = document.querySelector(".pause-gol");
        const resetButton = document.querySelector(".reset-gol");

        let intervalId;
        let isRunning = false;

        startButton.addEventListener("click", () => {
          if (!isRunning) {
            intervalId = setInterval(updateGrid, 500);
            isRunning = true;
          }
        });

        pauseButton.addEventListener("click", () => {
          clearInterval(intervalId);
          isRunning = false;
        });

        resetButton.addEventListener("click", () => {
          clearInterval(intervalId);
          isRunning = false;
          grid = Array.from({ length: rows }, () =>
            Array.from({ length: cols }, () => 0)
          );
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          setup();
        });

        setup();
      },
      { once: false }
    );
  </script>
</Layout>
