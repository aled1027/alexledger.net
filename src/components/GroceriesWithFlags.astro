---
import GroceryStoreCard from "./GroceryStoreCard.astro";
import GroceryStoreCardWithFlags from "./GroceryStoreCardWithFlags.astro";
import rehypeStringify from "rehype-stringify";
import remarkParse from "remark-parse";
import remarkRehype from "remark-rehype";
import { unified } from "unified";
import Papa from "papaparse";

// This is a wrapper around the GroceryStoreCard that
// (a) fetches the data from google sheets and then
// (b) cleans the data
// (c) renders the grocery data with the grocery store card

async function markdownToHtml(s) {
  // Given a string as markdown, return as an HTML string.
  // This string can be used astro with: <div set:html={htmlString} />
  const html = await unified()
    .use(remarkParse)
    .use(remarkRehype)
    .use(rehypeStringify)
    .process(s);
  return html;
}

const url =
  "https://docs.google.com/spreadsheets/d/1ITC99fIFUFOItju0OjOA7mV2RvNESmA1kd7mFWb-Jeg/gviz/tq?tqx=out:csv&sheet=flags";

const response = await fetch(url);
const csvData = await response.text();
const data = Papa.parse(csvData, { header: true });
const rawData = data.data;

// rawData should have the following fields
// Date, Grocery, GreenYellowRed, Description, Source1, Source2, Sourc3
// Each record represents a flag.

// Step 1: group by grocery
const groceries = {};
let flagCounter = 0;
for (const record of rawData) {
  // A human readable id for each grocery object. Used for element ids and events.
  const id = record.Grocery.toLowerCase()
    .replace(/ /g, "-")
    .replace(/'/g, "")
    .replace(/&/g, "");

  // Convert the markdown read more to HTMl for rendering
  const description = await markdownToHtml(record.Description);

  record.Name = record.record;
  record.Website = "website";
  record.Owner = "Owner";
  record.OwnerSubtext = "OwnerSubtext";

  if (!Object.keys(groceries).includes(id)) {
    // The the grocery isn't registered yet, register it
    groceries[id] = {};
    groceries[id].id = id;
    groceries[id].description = description.value;
    groceries[id].greenYellowRed = "Green";
    groceries[id].name = record.Grocery;
    groceries[id].owner = "Owner";
    groceries[id].ownerSubtext = "Subowner";
    groceries[id].flags = [];
  }

  groceries[id].flags.push({
    greenYellowRed: record.GreenYellowRed,
    description: record.Description,
    date: record.Date,
    id: ++flagCounter,
  });
  console.log(groceries[id].flags);
}
---

{
  Object.keys(groceries).map((groceryId) => (
    <GroceryStoreCardWithFlags grocery={groceries[groceryId]} />
  ))
}
