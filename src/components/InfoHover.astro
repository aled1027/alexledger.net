---
interface Props {
  title: string;
  link?: string;
}

const { title, link } = Astro.props;
const id = Math.random().toString(36).slice(2, 11);

// Has a javascript based solution
// https://indieweb.org/hovercard
// https://jamesg.blog/2022/10/12/hovercards/
// https://jamesg.blog/2022/10/10/announcing-indieweb-utils-v0-3-1/
// https://github.com/capjamesg/hovercard.js/blob/4578cc6ccaf9701ce83af115ecdf5c7b742602d9/hovercard.js#L4
---

<div class="content">
  {!!link ? <a href={link}>{title}</a> : <span>{title}</span>}
  <button id=`info-${id}` class="hoverable icon-container text-button">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="currentColor"
      class="icon">
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="m11.25 11.25.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9-3.75h.008v.008H12V8.25Z"
      ></path>
    </svg>
  </button>
</div>
<dialog id=`dialog-${id}` class=`hovercard`>
  <slot />
  <button class="close-button">Close</button>
</dialog>

<script is:inline define:vars={{ id }}>
  document
    .querySelector(`#dialog-${id}`)
    .querySelector(".close-button")
    .addEventListener("click", (e) => {
      e.currentTarget.parentElement.close();
    });

  function handleInfoClick(target) {
    const box = document.querySelector(`#dialog-${id}`);
    if (box.open) {
      box.close();
    } else {
      box.style.top =
        window.scrollY + target.getBoundingClientRect().bottom + "px";
      box.style.left =
        window.scrollX + target.getBoundingClientRect().left + "px";
      box.show();
    }
  }

  // Use currentTarget instead of target because that guarantees it'll use the button
  // and not the SVG, which will make the location consistent.
  // See https://piccalil.li/blog/event-currenttarget-to-the-rescue/
  const infoButton = document.querySelector(`#info-${id}`);
  infoButton.addEventListener("click", (e) => handleInfoClick(e.currentTarget));
</script>

<style>
  .content {
    display: flex;
    align-items: center;
  }

  .icon {
    width: 1.25rem;
    height: 1.25rem;
    margin-inline: 0.125rem;
  }

  .icon-container {
    display: flex;
    align-items: center;
  }

  .close-button {
    margin-top: 1rem;
    padding: 0.125rem 0.375rem;
    display: flex;
    position: absolute;
    bottom: 0.5rem;
    right: 0.75rem;
  }
</style>

<style is:global>
  .hovercard {
    position: absolute;
    background: white;
    border: 1px solid black;
    border-radius: 4px;
    margin: 0;
    padding: 1rem 1rem 2rem 1rem;
    max-width: 60ch;
  }
</style>
