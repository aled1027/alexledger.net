---
import rehypeStringify from "rehype-stringify";
import remarkParse from "remark-parse";
import remarkRehype from "remark-rehype";
import { unified } from "unified";
import Papa from 'papaparse';


async function markdownToHtml(s) {
  // Given a string as markdown, return as an HTML string.
 // This string can be used astro with: <div set:html={htmlString} />
  const html = await unified()
    .use(remarkParse)
    .use(remarkRehype)
    .use(rehypeStringify)
    .process(s);
  return html;
}

const url = "https://docs.google.com/spreadsheets/d/1Q31kIPVKB0yXY3kREschVt_ezv8blleyCWa10wW4vfs/gviz/tq?tqx=out:csv&sheet=Sheet1";
const response = await fetch(url);
const csvData = await response.text();
const data = Papa.parse(csvData, {header: true});
const groceries = data.data;

// Link to sheet:
// TODOs:
// - Add a green/yellow/red rating
//    - This would be opinionated and could pop up a summary with the issues listed
//    --> this would be really cool in general for something like this
//    --> Not sure exactly on the design here. Like what's the green/yellow/red icon. Maybe just a little svg circle with a mouse-over
// - If I were to do again:
//    - Try pulling data directly from a public spreadsheet or gist
//    - Include table filters
//    --> But would be key to support some html and dialogs from the table
//    --> I bet there's a good table component/library to play with.
// Not going to do but would do if going for perfect
// - Add links to owners
// - Add more sources and footnotes

// Augment groceries with Id, IssuesAsHtml, and NumIssues.
// This modified the grocery objects in place.
groceries.map(async (grocery) => {
  // A human readable id for each grocery object. Used for element ids and events.
  grocery.Id = grocery.Name.toLowerCase().replace(/ /g, "-").replace(/'/g, "").replace(/&/g, '');

  // Convert the markdown issues to HTMl for rendering
  grocery.IssuesAsHtml = markdownToHtml(grocery.Issues);

  // TODO: move into google sheet
  if (grocery.Issues.length > 0) {
    grocery.NumIssues = grocery.Issues.split("\n").length;
  } else {
    grocery.NumIssues = 0;
  }
});

// Sort the groceries for rendering by green then yellow then red
const sortMap = { Green: 0, Yellow: 1, Red: 2 }
groceries.sort((g1, g2) => sortMap[g1.GreenYellowRed] - sortMap[g2.GreenYellowRed]);
---

<div class="container">
  {
    groceries.map((grocery) => {
      return (
        <div class="row" id={grocery.Name.replace(" ", "-")}>
          <div class="cell">
            <h3>
              <a href={grocery.Website} target="_blank" rel="noreferrer">
                {grocery.Name}
              </a>
            </h3>
          </div>
          <div class="cell">
            <button class=`dot align-self-center bg-${grocery.GreenYellowRed.toLowerCase()}`></button>
          </div>
          <div class="cell">
            <small class="text-xs">owned by</small>
            <div>{grocery.Owner}</div>
            {grocery?.OwnerSubtext && <small>{grocery.OwnerSubtext}</small>}
          </div>
          <div class="cell">
            <small class="text-xs">classification</small>
            <div>{grocery.Classification}</div>
          </div>
          <div class="cell">
            <dialog id=`dialog${grocery.Id}`>
              <h4>{grocery.Name} Issues</h4>
              {grocery.NumIssues > 0 ? <div set:html={grocery.IssuesAsHtml} /> : <p>No Issues</p>}
              <button data-target=`#dialog${grocery.Id}` class="register-close-modal">Close</button>
            </dialog>
            <ul>
              <li>Number of Employees: {grocery['Number of Employees']}</li>
              <li>Starting Wage: {grocery['Starting Wage'] || 'Unknown' }</li>
              <li>Unionized: {grocery['Unionized?'] || 'No' }</li>
              <li>Number of Stores: {grocery['Number of Stores'] || "Unknown"}</li>
              <li><button id=`button${grocery.Id}` data-target=`#dialog${grocery.Id}` class="button-like-link register-open-modal">{grocery.NumIssues} Issue(s)</button></li>
              <li><a href={grocery['Wikipedia Page']} target="_blank" rel="noreferrer">Link to Wikpedia</a></li>
            </ul>
          </div>
        </div>
      );
    })
  }
</div>

<h3>Endnotes</h3>
<ul>
  <li>Most of the information is from Wikipedia which was last updated in 2022.</li>
  <li>The number of employees is the number of employees worldwide.</li>
  <li>Starting wage is guessed based on browsing job postings.</li>
  <li>The number of stores is the number of stores worldwide.</li>
  <li>I believe, but haven't verified, that workers at some stores of the chains are unionized.</li>
</ul>

<script is:inline>
  // Add event handlers for the opening of the modals
  const openButtons = document.querySelectorAll(".register-open-modal");
  openButtons.forEach((button) => {
    const targetId = button.dataset.target;
    const target = document.querySelector(targetId);
    button.addEventListener('click', () => {
      target.showModal();
    })
  })

  // Add event handlers for the closing of the modals
  const closeButtons = document.querySelectorAll(".register-close-modal");
  closeButtons.forEach((button) => {
    const targetId = button.dataset.target;
    const target = document.querySelector(targetId);
    button.addEventListener('click', () => {
      target.close();
    })
  })

  // Close dialogs if they are open and the background is selected
  const dialogs = document.querySelectorAll("dialog");
  dialogs.forEach((dialog) => {
    dialog.addEventListener('click', (e) => {
      const rect = dialog.getBoundingClientRect();
      const isInDialog = (rect.top <= e.clientY) && (e.clientY < rect.top + rect.height) && (rect.left <= e.clientX) && (e.clientX <= rect.left + rect.width);
      if (!isInDialog) {
        dialog.close();
      }
    })
  })
</script>

<style>
  .container {
    display: flex;
    flex-direction: column;
    container-type: inline-size;
  }

  .row {
    display: grid;
    align-items: center;
    grid-template-columns: repeat(1, 1fr);
    align-items: center;
    background: var(--surface-1);
    margin: 0;
    gap: 0.375rem;
    padding: 0.125rem 0.625rem;
    min-height: 6rem;
    border: 1px solid var(--text-1);

    &:hover {
      background-color: var(--surface-2);
    }

    @container (min-width: 600px) {
      grid-template-columns: 2fr 1fr 2fr 2fr 4fr;
      gap: 1rem;
    }
  }

  .cell {
    display: flex;
    flex-direction: column;
    gap: 0;
    margin: 0.125rem 0;

    @container (min-width: 600px) {
      grid-template-columns: repeat(4, 1fr);
      margin: 1rem 0;
    }
  }

  .cell h3 {
    font-weight: 500;
  }

  button {
    text-decoration: underline;
    &:hover {
      font-weight: 400;
    }
  }

  .cell h3 a {
    text-decoration: none;
    &:hover {
      text-decoration: underline;
    }
  }

  dialog {
    min-width: 33vw;
    max-width: 80vw;
    border: 1px solid rgba(0, 0, 0, 0.8);
    border-radius: 5px;
    background-color: var(--surface-1);;
    color: var(--text-1);
  }

  /* COMPONENTS */
  .button-like-link {
    /* Component for a button that looks like text */
    padding: 0;
    width: fit-content;
    border: none;
    color: inherit;
    background: inherit;
    text-decoration: underline;
    text-decoration-color: var(--fun-1);
    text-decoration-thickness: 2px;
    text-underline-offset: 3px;
    text-decoration-skip-ink: skip;

    &:hover {
      text-decoration-color: var(--fun-2);
    }
  }

  .dot {
    padding: 8px;
    height: 25px;
    width: 25px;
    border-radius: 50%;
    display: inline-block;
    border-color: var(--text-1);
  }

  /* UTILITIES */
  .self-justify-center {
    justify-self: center;
  }

  .text-xs {
    font-size: 12px;
  }

  .bg-green {
    background-color: green;
  }
  .bg-yellow {
    background-color: yellow;
  }

  .bg-red {
    background-color: red;
  }

</style>


