---
// TODO:
// 1. Convert the page processing to js
// 2. Make a UI with text box inputs for:
//  a. URL
//  b. openai API key
// 3. Run it
// 4. Make a super crude loading indicator
---

<script is:inline src="https://d3js.org/d3.v4.min.js"></script>

<div class="form-container">
  <form id="recipe-form">
    <div>
      <label for="openai-api-key">OpenAI API Key:</label>
      <!-- <textarea id="openai-api-key">Put your OpenAI API Key here</textarea> -->
      <input type="password" id="openai-api-key" name="apiKey" required />
    </div>
    <div>
      <label for="input-url">URL:</label>
      <input type="text" id="input-url" name="url" required />
      <!-- <textarea id="input-url">https://example.com</textarea> -->
      <!-- <textarea id="input-url">https://tastesbetterfromscratch.com/no-bake-granola-bars/</textarea> -->
      <!-- <textarea id="input-url">https://homebrewacademy.com/hop-water-recipe/</textarea -->
    </div>
    <div>
      <button id="go-button" type="submit">Go</button>
    </div>
  </form>
</div>

<div id="trn-status"></div>
<div id="container"></div>

<script is:inline>
  function computeDepth(nodes, edges) {
    // Initialize the depth of all nodes to -1 (undefined)
    for (const node of nodes) {
      node.depth = -1;
    }

    // Helper function to perform depth-first traversal
    function dfs(node, currentDepth, visited) {
      if (visited.has(node.label)) return; // Prevent revisiting nodes
      visited.add(node.label); // Mark the node as visited

      if (node.depth < currentDepth) {
        node.depth = currentDepth;
      }

      if (edges[node.label]) {
        for (const neighborLabel of edges[node.label]) {
          const neighbor = nodes.find((n) => n.label === neighborLabel);
          dfs(neighbor, node.depth + 1, visited);
        }
      }

      visited.delete(node.label); // Unmark the node as visited (optional)
    }

    // Find all nodes with no incoming edges (roots)
    const nodeLabels = nodes.map((n) => n.label);
    const incomingEdges = new Set(Object.values(edges).flat());
    const roots = nodeLabels.filter((label) => !incomingEdges.has(label));

    // Compute depth starting from each root
    for (const rootLabel of roots) {
      const root = nodes.find((n) => n.label === rootLabel);
      dfs(root, 0, new Set());
    }
  }

  function computePositions(nodes, edges) {
    const depths = [...new Set(nodes.map((n) => n.depth))].sort(
      (a, b) => a - b
    );
    for (const depth of depths) {
      const nodesAtDepth = nodes.filter((n) => n.depth === depth);
      row = 0;

      for (const node of nodesAtDepth) {
        let length = 1;
        const nodeEdges = edges[node.label];
        if (!!nodeEdges && nodeEdges.length > 0) {
          const nextNode = nodes.find((n) => n.label === nodeEdges[0]);
          length = nextNode.depth - node.depth;
        }

        // compute indegree
        let indegreeHeight = 0;
        for (const n of nodes) {
          const nEdges = edges[n.label];
          if (nEdges && nEdges.includes(node.label)) {
            indegreeHeight += n.height;
          }
        }
        const baseHeight = 120;
        const baseWidth = 155;
        const height = Math.max(indegreeHeight, baseHeight);

        node.row = row;
        node.col = depth;
        node.length = length;
        row += height / baseHeight; /* This could be more elegant */

        // Compute the coordinates

        node.top = node.row * baseHeight;
        node.left = node.col * baseWidth;
        node.width = baseWidth * node.length;
        node.height = Math.max(indegreeHeight, baseHeight);
      }
    }
  }

  function addToDom(nodes) {
    console.log("Adding to dom");
    const container = d3.select("#container");
    for (const node of nodes) {
      container
        .append("div")
        .style("left", `${node.left}px`)
        .style("top", `${node.top}px`)
        .style("height", `${node.height}px`)
        .style("width", `${node.width}px`)
        .attr("class", "node")
        .text(node.label);
    }
  }

  function getNodesFromEdges(edges) {
    // Get the nodes from the edges
    const nodeSet = new Set();
    for (const node of Object.keys(edges)) {
      nodeSet.add(node);
      for (const node2 of edges[node]) {
        nodeSet.add(node2);
      }
    }
    const nodes = Array.from(nodeSet).map((label) => ({ label }));
    return nodes;
  }

  function renderGraph(edges) {
    const nodes = getNodesFromEdges(edges);
    computeDepth(nodes, edges);
    computePositions(nodes, edges);
    addToDom(nodes);
  }

  const SMALL_RECIPE_PROMPT = `
  Your task is to simplify the recipe into a succinct numbered list recipe. Make the recipe as simple as possible, using as few words per step as you can while still communicating clearly. Each step should be a single action. Ignore any optional steps.

  The output format should be like:

  1. Cook 1 pound of pasta with 4 cups of water.
  2. Drain when pasta is finished.
  3. Combine garlic, onion, and tomato in a pot on the stove.
  4. Simmer until cooked
  5. Ladle the tomato sauce over the cooked pasta.
  `;

  const EDGE_LIST_PROMPT = `
    Your job is to convert the recipe to a JSON edge list. The graph should be a directed acyclic graph, with the format below. The ingredients to the recipe should be the source nodes in the graph.
    
    Example output:  
    {
      "Eggs": ["Cook eggs"],
      "Cook eggs": ["Serve"]
    }
`;

  function extractTextFromHtml(htmlString) {
    // Create a new DOM parser
    const parser = new DOMParser();
    // Parse the HTML string
    const doc = parser.parseFromString(htmlString, "text/html");

    // Remove <script> and <style> elements
    doc.querySelectorAll("script, style").forEach((element) => {
      element.remove();
    });
    // Get the text content of the body
    return doc.body.textContent || "";
  }

  // Function to fetch HTML content from a URL and extract text
  async function fetchAndExtractText(url) {
    try {
      // Use CORS proxy
      const corsProxy = "https://cors-anywhere.herokuapp.com/";
      const response = await fetch(corsProxy + url);
      const htmlString = await response.text();
      // Extract the text content
      const extractedText = extractTextFromHtml(htmlString);
      // Display the extracted text
      return extractedText;
    } catch (error) {
      console.error("Error fetching the URL:", error);
    }
  }

  async function getCompletion(prompt, system) {
    const openaiApiKey = document.getElementById("openai-api-key").value;
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${openaiApiKey}`,
      },
      body: JSON.stringify({
        // model: "gpt-3.5-turbo",
        model: "gpt-4o",
        messages: [
          { role: "system", content: system },
          { role: "user", content: prompt },
        ],
      }),
    });

    if (!response.ok) {
      throw "OpenAI API Called failed";
    }

    const data = await response.json();
    return data.choices[0].message.content.trim();
  }

  async function recipeToGraph(bigRecipe) {
    const smallRecipe = await getCompletion(bigRecipe, SMALL_RECIPE_PROMPT);
    console.log("smallRecipe", smallRecipe);

    // Convert to edge list
    const onlyGraph = await getCompletion(smallRecipe, EDGE_LIST_PROMPT);
    console.log("\nGRAPH\n\n");
    console.log("onlyGraph", onlyGraph);
    return onlyGraph;
  }

  document
    .getElementById("recipe-form")
    .addEventListener("submit", async (event) => {
      event.preventDefault();

      console.log("Clicked!");
      const status = document.getElementById("trn-status");
      try {
        const url = document.getElementById("input-url").value;
        status.innerHTML = "Fetching...";

        console.log("extracted text");
        const extractedText = await fetchAndExtractText(url);
        status.innerHTML = "Transforming...";
        let graph = await recipeToGraph(extractedText);
        console.log(graph);

        graph = graph.replace("```json", "");
        graph = graph.replace("```", "");

        status.innerHTML = "Parsing...";
        const parsedGraph = JSON.parse(graph);
        renderGraph(parsedGraph);
        status.innerHTML = "...done!";
      } catch (error) {
        status.innerHTML = `Error: ${error}`;
        console.error(error);
      }
    });
</script>

<style is:inline>
  .node {
    border: 2px solid transparent;
    background-clip: padding-box;
    background-color: oklch(90% 0.1 143);
    line-height: 1.5em;
    padding: 0.5rem;
    box-sizing: border-box;
    position: absolute;

    font-size: 1.25rem;
    text-wrap: balance;
    text-align: center;
    display: grid;
    place-content: center;
  }

  #container {
    position: relative;
    height: 1000px;
  }

  .form-container {
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    width: 300px;
    width: clamp(280px, 600px, 600px);
    margin-inline: auto;
  }

  .form-container h2 {
    text-align: center;
    margin-bottom: 20px;
    color: #333;
  }

  .form-container label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
  }

  .form-container input[type="text"],
  .form-container input[type="password"] {
    width: calc(100% - 22px);
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-sizing: border-box;
  }

  .form-container button {
    width: 100%;
    padding: 10px;
    border: none;
    border-radius: 5px;
    background-color: #007bff;
    color: white;
    font-size: 16px;
    cursor: pointer;
  }

  .form-container button:hover {
    background-color: #0056b3;
  }
</style>
