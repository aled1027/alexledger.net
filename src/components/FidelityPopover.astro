---
// A popover component inspired by Fidelity's popover.
// Example usage:
//   <FidelityPopover>
//     <p slot="text-content">click me to see a popover</p>
//     <div slot="popover-content">
//       <div>Traditional IRA</div>
//       <div>244212345</div>
//       <div class="popover-content">
//         <div>Cash Debit from Unsettled Activity</div>
//         <div>$12341234234</div>
//       </div>
//       <div class="popover-links">
//         <a href="">Balances</a>
//         <a href="">History</a>
//       </div>
//     </div>
//   </FidelityPopover>
//   <style>
//     .popover-content {
//       display: flex;
//       justify-content: space-between;
//       gap: 2rem;
//       margin-top: 0.5rem;
//       margin-bottom: 0.5rem;
//     }
//   </style>

const rand = Math.floor(Math.random() * 10000);
const textContentId = `text-content-${rand}`;
const dialogId = `popover-dialog-${rand}`;
const closeDialogId = `close-popover-dialog-${rand}`;
---

<button
  id={textContentId}
  class="text-content text-button"
  data-dialog-id={dialogId}>
  <slot name="text-content" />
</button>
<dialog
  id={dialogId}
  aria-hidden="true"
  data-close-dialog-id={closeDialogId}
  class="dialog">
  <slot name="popover-content" />
  <button id={closeDialogId} class="close-button">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="currentColor"
      class="bi bi-x"
      viewBox="0 0 16 16">
      <path
        d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"
      ></path>
    </svg>
  </button>
</dialog>

<script is:inline define:vars={{ textContentId }}>
  const textContent = document.querySelector(`#${textContentId}`);
  const dialogId = textContent.dataset.dialogId;
  const dialog = document.querySelector(`#${dialogId}`);
  const closeDialogId = dialog.dataset.closeDialogId;
  const closeDialogButton = document.querySelector(`#${closeDialogId}`);

  textContent.addEventListener("click", () => {
    // Fetch the dialog height via css look-up. Looking up with bounding rect doesn't work
    // because the dialog isn't currently shown.

    // Set the inset of the dialog to be right above the textContent element
    const dialogHeight = parseInt(
      getComputedStyle(dialog).getPropertyValue("height").replace("px", "")
    );
    const topPos =
      textContent.getBoundingClientRect().top -
      document.body.getBoundingClientRect().top -
      dialogHeight;
    const leftPos = textContent.getBoundingClientRect().left;
    const insetStyle = `${topPos}px auto auto ${leftPos}px`;
    dialog.style.inset = insetStyle;

    // Show the modal and update properties accordingly
    dialog.showModal();
    dialog.setAttribute("aria-hidden", "false");
  });

  // This is the X button inside the modal.
  closeDialogButton.addEventListener("click", () => {
    dialog.close();
  });
</script>

<style>
  .text-content {
    text-decoration: underline;
    text-decoration-style: dotted;
    margin: 0;

    p {
      margin: 0;
    }
  }

  .dialog {
    position: absolute;
    padding: 1.5rem;
    width: 40ch;
    /* max-width: 100%; */
    height: 200px;
    border-radius: 0.1875em;
    border: solid 1px #ccc;
    box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.3);

    &::backdrop {
      background: rgba(0, 0, 0, 0);
    }
  }

  .close-button {
    position: absolute;
    right: 0.125rem;
    top: 0.125rem;
    border: none;
    padding: 0;
    display: grid;
    place-content: center;

    svg {
      width: 40px;
      height: 40px;
    }
  }
</style>
